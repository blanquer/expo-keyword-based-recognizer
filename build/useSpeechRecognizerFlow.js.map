{"version":3,"file":"useSpeechRecognizerFlow.js","sourceRoot":"","sources":["../src/useSpeechRecognizerFlow.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState, useCallback } from 'react';\nimport SpeechRecognitionManager from './index';\nimport { \n  SpeechRecognitionFlow,\n  FlowActivationOptions\n} from './SpeechRecognitionTypes';\nimport {\n  KeywordRecognizerState,\n  KeywordRecognizerStateEnum\n} from './ExpoKeywordBasedRecognizer.types';\n\nexport interface UseSpeechRecognizerFlowOptions {\n  flowName: string;\n  // Optional initial configuration\n  initialKeyword?: string;\n  initialLanguage?: string;\n  initialSilenceDelay?: number;\n  initialKeywordEnabled?: boolean;\n  initializeAudioSession?: boolean;\n  \n  // Optional callbacks for side effects\n  onKeywordDetected?: (keyword: string) => void;\n  onRecognitionResult?: (text: string) => void;\n  onError?: (error: Error) => void;\n  onTakenOver?: (newFlowId: string) => void;\n  onStateChange?: (state: KeywordRecognizerState) => void;\n}\n\nexport interface UseSpeechRecognizerFlowReturn {\n  // State\n  state: KeywordRecognizerState;\n  isActive: boolean;\n  isListening: boolean; // Computed: state !== IDLE && isActive\n  detectedKeyword: string | null;\n  recognizedText: string | null;\n  error: Error | null;\n  takenOverBy: string | null;\n  \n  // Configuration state\n  keyword: string;\n  keywordEnabled: boolean;\n  language: string;\n  silenceDelay: number;\n  \n  // Configuration setters\n  setKeyword: (keyword: string) => void;\n  setKeywordEnabled: (enabled: boolean) => void;\n  setLanguage: (language: string) => void;\n  setSilenceDelay: (delay: number) => void;\n  \n  // Actions\n  startListening: (options?: Partial<FlowActivationOptions>) => Promise<void>;\n  stopListening: () => Promise<void>;\n  clearResults: () => void; // Clears detectedKeyword, recognizedText, error\n  \n  // Flow instance (for advanced use cases)\n  flow: SpeechRecognitionFlow | null;\n}\n\nexport function useSpeechRecognizerFlow(options: UseSpeechRecognizerFlowOptions): UseSpeechRecognizerFlowReturn {\n  const {\n    flowName,\n    initialKeyword = '',\n    initialLanguage = 'en-US',\n    initialSilenceDelay = 2000,\n    initialKeywordEnabled = true,\n    initializeAudioSession = false,\n    onKeywordDetected: onKeywordDetectedCallback,\n    onRecognitionResult: onRecognitionResultCallback,\n    onError: onErrorCallback,\n    onTakenOver: onTakenOverCallback,\n    onStateChange: onStateChangeCallback,\n  } = options;\n\n  // Flow instance\n  const flowRef = useRef<SpeechRecognitionFlow | null>(null);\n  \n  // State management\n  const [state, setState] = useState<KeywordRecognizerState>({ state: KeywordRecognizerStateEnum.IDLE });\n  const [isActive, setIsActive] = useState(false);\n  const [detectedKeyword, setDetectedKeyword] = useState<string | null>(null);\n  const [recognizedText, setRecognizedText] = useState<string | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [takenOverBy, setTakenOverBy] = useState<string | null>(null);\n  \n  // Configuration state\n  const [keyword, setKeyword] = useState(initialKeyword);\n  const [keywordEnabled, setKeywordEnabled] = useState(initialKeywordEnabled);\n  const [language, setLanguage] = useState(initialLanguage);\n  const [silenceDelay, setSilenceDelay] = useState(initialSilenceDelay);\n  \n  // Computed properties\n  const isListening = isActive && state.state !== KeywordRecognizerStateEnum.IDLE;\n  \n  // Initialize flow and set up event listeners\n  useEffect(() => {\n    const flow = SpeechRecognitionManager.registerFlow(flowName);\n    flowRef.current = flow;\n    \n    // Set up event listeners\n    const unsubscribeState = flow.onStateChange((newState) => {\n      setState(newState);\n      setIsActive(flow.isActive);\n      onStateChangeCallback?.(newState);\n    });\n    \n    const unsubscribeKeyword = flow.onKeywordDetected((event) => {\n      setDetectedKeyword(event.keyword);\n      onKeywordDetectedCallback?.(event.keyword);\n    });\n    \n    const unsubscribeResult = flow.onRecognitionResult((result) => {\n      setRecognizedText(result.text);\n      onRecognitionResultCallback?.(result.text);\n    });\n    \n    const unsubscribeError = flow.onError((err) => {\n      setError(err);\n      onErrorCallback?.(err);\n    });\n    \n    const unsubscribeTakenOver = flow.onTakenOver((newFlowId) => {\n      // Reset state when taken over\n      setState({ state: KeywordRecognizerStateEnum.IDLE });\n      setDetectedKeyword(null);\n      setRecognizedText(null);\n      setError(null);\n      setTakenOverBy(newFlowId);\n      onTakenOverCallback?.(newFlowId);\n    });\n    \n    // Cleanup\n    return () => {\n      if (flowRef.current) {\n        flowRef.current.deactivate();\n        SpeechRecognitionManager.unregisterFlow(flowName);\n      }\n      unsubscribeState();\n      unsubscribeKeyword();\n      unsubscribeResult();\n      unsubscribeError();\n      unsubscribeTakenOver();\n    };\n  }, [flowName]); // Only re-run if flowName changes\n  \n  // Actions\n  const startListening = useCallback(async (overrideOptions?: Partial<FlowActivationOptions>) => {\n    if (!flowRef.current) {\n      console.error('Flow not initialized');\n      return;\n    }\n    \n    try {\n      // Clear previous results\n      setDetectedKeyword(null);\n      setRecognizedText(null);\n      setError(null);\n      setTakenOverBy(null);\n      \n      const activationOptions: FlowActivationOptions = {\n        keyword: keywordEnabled ? keyword : null,\n        language,\n        maxSilenceDuration: silenceDelay,\n        soundEnabled: true,\n        interimResults: true,\n        contextualHints: [],\n        initializeAudioSession,\n        ...overrideOptions, // Allow override of any option\n      };\n      \n      await flowRef.current.activate(activationOptions);\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(String(err));\n      setError(error);\n      onErrorCallback?.(error);\n    }\n  }, [keyword, keywordEnabled, language, silenceDelay, onErrorCallback]);\n  \n  const stopListening = useCallback(async () => {\n    if (!flowRef.current) {\n      console.error('Flow not initialized');\n      return;\n    }\n    \n    try {\n      await flowRef.current.deactivate();\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(String(err));\n      setError(error);\n      onErrorCallback?.(error);\n    }\n  }, [onErrorCallback]);\n  \n  const clearResults = useCallback(() => {\n    setDetectedKeyword(null);\n    setRecognizedText(null);\n    setError(null);\n    setTakenOverBy(null);\n  }, []);\n  \n  return {\n    // State\n    state,\n    isActive,\n    isListening,\n    detectedKeyword,\n    recognizedText,\n    error,\n    takenOverBy,\n    \n    // Configuration\n    keyword,\n    keywordEnabled,\n    language,\n    silenceDelay,\n    \n    // Configuration setters\n    setKeyword,\n    setKeywordEnabled,\n    setLanguage,\n    setSilenceDelay,\n    \n    // Actions\n    startListening,\n    stopListening,\n    clearResults,\n    \n    // Flow instance\n    flow: flowRef.current,\n  };\n}"]}