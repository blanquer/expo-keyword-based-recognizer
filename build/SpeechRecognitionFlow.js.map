{"version":3,"file":"SpeechRecognitionFlow.js","sourceRoot":"","sources":["../src/SpeechRecognitionFlow.ts"],"names":[],"mappings":"AAAA,OAAO,gCAAgC,MAAM,oCAAoC,CAAC;AAWlF,MAAM,OAAO,qBAAqB;IAOd;IANV,SAAS,GAAG,KAAK,CAAC;IAClB,QAAQ,GAAiC,IAAI,CAAC;IAC9C,OAAO,CAAM,CAAC,kDAAkD;IAChE,kBAAkB,GAAoC,EAAE,CAAC;IAEjE,YACkB,MAAc,EAC9B,OAAY;QADI,WAAM,GAAN,MAAM,CAAQ;QAG9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,OAA8B;QAC3C,gDAAgD;QAChD,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,UAAU;QACd,IAAI,CAAC,IAAI,CAAC,SAAS;YAAE,OAAO;QAE5B,2BAA2B;QAC3B,MAAM,gCAAgC,CAAC,UAAU,EAAE,CAAC;QAEpD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,aAAa,CAAC,QAAiD;QAC7D,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;IAC/E,CAAC;IAED,iBAAiB,CAAC,QAAgD;QAChE,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,mBAAmB,EAAE,QAAQ,CAAC,CAAC;IACnF,CAAC;IAED,mBAAmB,CAAC,QAA6C;QAC/D,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,qBAAqB,EAAE,QAAQ,CAAC,CAAC;IACrF,CAAC;IAED,OAAO,CAAC,QAAgC;QACtC,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;IACzE,CAAC;IAED,WAAW,CAAC,QAAqC;QAC/C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEvC,OAAO,GAAG,EAAE;YACV,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;QAClF,CAAC,CAAC;IACJ,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,qCAAqC;IACrC,UAAU,CAAC,MAAe;QACxB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,WAAW,CAAC,OAAqC;QAC/C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAGD,wDAAwD;IACxD,gBAAgB,CAAC,SAAiB;QAChC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IACnE,CAAC;CACF","sourcesContent":["import ExpoKeywordBasedRecognizerModule from './ExpoKeywordBasedRecognizerModule';\nimport { \n  SpeechRecognitionFlow as ISpeechRecognitionFlow, \n  FlowActivationOptions \n} from './SpeechRecognitionTypes';\nimport { \n  KeywordRecognizerState, \n  KeywordDetectionEvent, \n  RecognitionResult \n} from './ExpoKeywordBasedRecognizer.types';\n\nexport class SpeechRecognitionFlow implements ISpeechRecognitionFlow {\n  private _isActive = false;\n  private _options: FlowActivationOptions | null = null;\n  private manager: any; // Will be typed as SpeechRecognitionManager later\n  private takenOverCallbacks: ((newFlowId: string) => void)[] = [];\n\n  constructor(\n    public readonly flowId: string,\n    manager: any\n  ) {\n    this.manager = manager;\n  }\n\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  async activate(options: FlowActivationOptions): Promise<void> {\n    // Manager will handle deactivating current flow\n    await this.manager._activateFlow(this, options);\n  }\n\n  async deactivate(): Promise<void> {\n    if (!this._isActive) return;\n    \n    // Deactivate native module\n    await ExpoKeywordBasedRecognizerModule.deactivate();\n    \n    this._isActive = false;\n    this._options = null;\n  }\n\n  onStateChange(callback: (state: KeywordRecognizerState) => void): () => void {\n    return this.manager.registerCallback(this.flowId, 'onStateChange', callback);\n  }\n\n  onKeywordDetected(callback: (event: KeywordDetectionEvent) => void): () => void {\n    return this.manager.registerCallback(this.flowId, 'onKeywordDetected', callback);\n  }\n\n  onRecognitionResult(callback: (result: RecognitionResult) => void): () => void {\n    return this.manager.registerCallback(this.flowId, 'onRecognitionResult', callback);\n  }\n\n  onError(callback: (error: Error) => void): () => void {\n    return this.manager.registerCallback(this.flowId, 'onError', callback);\n  }\n\n  onTakenOver(callback: (newFlowId: string) => void): () => void {\n    this.takenOverCallbacks.push(callback);\n    \n    return () => {\n      this.takenOverCallbacks = this.takenOverCallbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  getOptions(): FlowActivationOptions | null {\n    return this._options;\n  }\n\n  // Internal methods called by manager\n  _setActive(active: boolean): void {\n    this._isActive = active;\n  }\n\n  _setOptions(options: FlowActivationOptions | null): void {\n    this._options = options;\n  }\n\n\n  // Internal method to notify this flow it was taken over\n  _notifyTakenOver(newFlowId: string): void {\n    this.takenOverCallbacks.forEach(callback => callback(newFlowId));\n  }\n}"]}