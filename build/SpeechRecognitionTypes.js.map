{"version":3,"file":"SpeechRecognitionTypes.js","sourceRoot":"","sources":["../src/SpeechRecognitionTypes.ts"],"names":[],"mappings":"","sourcesContent":["import { \n  KeywordRecognizerState, \n  KeywordRecognizerOptions, \n  KeywordDetectionEvent, \n  RecognitionResult, \n  PermissionResponse, \n  Language \n} from './ExpoKeywordBasedRecognizer.types';\n\nexport interface FlowActivationOptions extends KeywordRecognizerOptions {\n  onInterrupted?: () => void;\n}\n\nexport interface SpeechRecognitionFlow {\n  readonly flowId: string;\n  readonly isActive: boolean;\n  \n  activate(options: FlowActivationOptions): Promise<void>;\n  deactivate(): Promise<void>;\n  \n  onStateChange(callback: (state: KeywordRecognizerState) => void): () => void;\n  onKeywordDetected(callback: (event: KeywordDetectionEvent) => void): () => void;\n  onRecognitionResult(callback: (result: RecognitionResult) => void): () => void;\n  onError(callback: (error: Error) => void): () => void;\n  onTakenOver(callback: (newFlowId: string) => void): () => void;\n  \n  getOptions(): FlowActivationOptions | null;\n}\n\nexport interface SpeechRecognitionManager {\n  registerFlow(flowId: string): SpeechRecognitionFlow;\n  unregisterFlow(flowId: string): void;\n  getActiveFlow(): SpeechRecognitionFlow | null;\n  \n  getState(): KeywordRecognizerState;\n  isActive(): boolean;\n  \n  requestPermissions(): Promise<PermissionResponse>;\n  getAvailableLanguages(): Promise<Language[]>;\n}"]}